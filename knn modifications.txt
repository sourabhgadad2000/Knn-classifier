i) euclidian

from sklearn import datasets
iris = datasets.load_iris()
print("Iris dataset loaded...")

print(iris.keys())

for i in range(len(iris.target_names)):
  print("Label", i, "-",str(iris.target_names[i]))

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.1)

from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors=3, p = 2 )
classifier.fit(x_train, y_train)
y_pred = classifier.predict(x_test)

from sklearn.metrics import confusion_matrix, accuracy_score
print("Confusion Matrix")
print(confusion_matrix(y_test,y_pred))

print("Correct predicition results",accuracy_score(y_test,y_pred)*100,"%")
print("Worng predicition results",(1-accuracy_score(y_test,y_pred))*100,"%")


ii) Hamming
from sklearn import datasets
iris = datasets.load_iris()
print("Iris dataset loaded...")

print(iris.keys())

for i in range(len(iris.target_names)):
  print("Label", i, "-",str(iris.target_names[i]))

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.1)

from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors=3,metric = 'hamming' )
classifier.fit(x_train, y_train)
y_pred = classifier.predict(x_test)

from sklearn.metrics import confusion_matrix, accuracy_score
print("Confusion Matrix")
print(confusion_matrix(y_test,y_pred))

print("Correct predicition results",accuracy_score(y_test,y_pred)*100,"%")
print("Worng predicition results",(1-accuracy_score(y_test,y_pred))*100,"%")



iii) Manhatten


from sklearn import datasets
iris = datasets.load_iris()
print("Iris dataset loaded...")

print(iris.keys())

for i in range(len(iris.target_names)):
  print("Label", i, "-",str(iris.target_names[i]))

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.1)

from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors=3,p = 1 )
classifier.fit(x_train, y_train)
y_pred = classifier.predict(x_test)

from sklearn.metrics import confusion_matrix, accuracy_score
print("Confusion Matrix")
print(confusion_matrix(y_test,y_pred))

print("Correct predicition results",accuracy_score(y_test,y_pred)*100,"%")
print("Worng predicition results",(1-accuracy_score(y_test,y_pred))*100,"%")





iv) minkowski 
we don't specify anything to minkowski
from sklearn import datasets
iris = datasets.load_iris()
print("Iris dataset loaded...")

print(iris.keys())

for i in range(len(iris.target_names)):
  print("Label", i, "-",str(iris.target_names[i]))

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.1)

from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors=3)
classifier.fit(x_train, y_train)
y_pred = classifier.predict(x_test)

from sklearn.metrics import confusion_matrix, accuracy_score
print("Confusion Matrix")
print(confusion_matrix(y_test,y_pred))

print("Correct predicition results",accuracy_score(y_test,y_pred)*100,"%")
print("Worng predicition results",(1-accuracy_score(y_test,y_pred))*100,"%")
from sklearn import datasets
iris = datasets.load_iris()
print("Iris dataset loaded...")

print(iris.keys())

for i in range(len(iris.target_names)):
  print("Label", i, "-",str(iris.target_names[i]))

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.1)

from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors=3,p = 1 )
classifier.fit(x_train, y_train)
y_pred = classifier.predict(x_test)

from sklearn.metrics import confusion_matrix, accuracy_score
print("Confusion Matrix")
print(confusion_matrix(y_test,y_pred))

print("Correct predicition results",accuracy_score(y_test,y_pred)*100,"%")
print("Worng predicition results",(1-accuracy_score(y_test,y_pred))*100,"%")



v) cosine

from sklearn import datasets
iris = datasets.load_iris()
print("Iris dataset loaded...")

print(iris.keys())

for i in range(len(iris.target_names)):
  print("Label", i, "-",str(iris.target_names[i]))

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.1)

from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors=3, metric = 'cosine')
classifier.fit(x_train, y_train)
y_pred = classifier.predict(x_test)

from sklearn.metrics import confusion_matrix, accuracy_score
print("Confusion Matrix")
print(confusion_matrix(y_test,y_pred))

print("Correct predicition results",accuracy_score(y_test,y_pred)*100,"%")
print("Worng predicition results",(1-accuracy_score(y_test,y_pred))*100,"%")
from sklearn import datasets
iris = datasets.load_iris()
print("Iris dataset loaded...")

print(iris.keys())

for i in range(len(iris.target_names)):
  print("Label", i, "-",str(iris.target_names[i]))

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=0.1)

from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors=3,p = 1 )
classifier.fit(x_train, y_train)
y_pred = classifier.predict(x_test)

from sklearn.metrics import confusion_matrix, accuracy_score
print("Confusion Matrix")
print(confusion_matrix(y_test,y_pred))

print("Correct predicition results",accuracy_score(y_test,y_pred)*100,"%")
print("Worng predicition results",(1-accuracy_score(y_test,y_pred))*100,"%")

